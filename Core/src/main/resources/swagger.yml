openapi: 3.0.0
info:
  title: "User API"
  version: "1.0.0"
servers:
  - url: "{protocol}://localhost:{port}"
    description: "Local development server"
    variables:
      protocol:
        default: "http"
        enum:
          - "http"
          - "https"
      port:
        default: "8080"
        enum:
          - "8080"
          - "8443"
  - url: "{protocol}://production.example.com/{basePath}"
    description: "Production server"
    variables:
      protocol:
        default: "https"
      basePath:
        default: "api/v1"
        enum:
          - "api/v1"
          - "api/v2"
tags:
  - name: "Users"
    description: "Operations related to users"
paths:
  /users:
    get:
      summary: "Get all users"
      description: "Returns a list of all users."
      operationId: "getAllUsers"
      tags:
        - "Users"
      responses:
        '200':
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
        '404':
          $ref: "#/components/responses/NotFoundResponse"
    post:
      summary: "Create a new user"
      description: "Adds a new user to the system."
      operationId: "createUser"
      tags:
        - "Users"
      parameters:
        - name: RequestId
          in: header
          description: "Request ID for tracking"
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '201':
          description: "User created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequestResponse'

  /users/{userId}:
    put:
      summary: "Update an existing user"
      description: "Updates details of a specific user."
      operationId: "updateUser"
      tags:
        - "Users"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: "User updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

components:
  schemas:
    UserDto:
      type: object
      required:
        - userName
        - password
        - email
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        userName:
          type: string
          example: "john_doe"
        password:
          type: string
          format: password
          example: "s3cr3t"
        email:
          type: string
          example: "john.doe@example.com"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  responses:
    NotFoundResponse:
      description: "Not Found Response"
      content:
        application/json:
          schema:
            type: object
            properties:
              errorMessage:
                type: string
                example: "User not found"
    BadRequestResponse:
      description: "Invalid request format or parameters"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid request"

  callbacks:
    UserUpdateCallback:
      '{$request.body#/callbackUrl}':
        post:
          requestBody:
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/UserDto'
          responses:
            '200':
              description: Callback successfully received

  links:
    UserLink:
      operationId: getUserById
      parameters:
        userId: '$response.body#/id'